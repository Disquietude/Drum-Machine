{"version":3,"sources":["sounds/boom.wav","sounds/clap.wav","sounds/hihat.wav","sounds/kick.wav","sounds/openhat.wav","sounds/ride.wav","sounds/snare.wav","sounds/tink.wav","sounds/tom.wav","js/components/Display.js","js/components/DrumPad.js","js/sounds.js","js/components/DrumMachine.js","js/components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Display","props","react_default","a","createElement","className","id","lastPlayed","DrumPad","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","audioClip","React","createRef","pad","playClip","bind","assertThisInitialized","handleKeyPress","_this2","setLastPlayed","label","current","currentTime","play","setTimeout","event","preventDefault","key","toUpperCase","keybind","document","addEventListener","removeEventListener","onClick","ref","src","Component","sounds","boom","clap","hihat","kick","openhat","ride","snare","tink","tom","DrumMachine","state","setState","pads","map","index","DrumPad_DrumPad","components_Display","App","DrumMachine_DrumMachine","Boolean","window","location","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5846bfe6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boom.7a9156f3.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap.bb46e654.wav\";","module.exports = __webpack_public_path__ + \"static/media/hihat.f418b88a.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.718a4875.wav\";","module.exports = __webpack_public_path__ + \"static/media/openhat.d0849ea5.wav\";","module.exports = __webpack_public_path__ + \"static/media/ride.ccea7bb6.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.359969fc.wav\";","module.exports = __webpack_public_path__ + \"static/media/tink.bd92d16c.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom.9813273f.wav\";","import React from 'react';\r\n\r\nconst Display = (props) => (\r\n  <div className='display' id='display'>\r\n    {props.lastPlayed}\r\n  </div>\r\n);\r\n\r\nexport default Display;","import React, { Component } from 'react';\r\n\r\nexport default class DrumPad extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.audioClip = React.createRef();\r\n    this.pad = React.createRef();\r\n    this.playClip = this.playClip.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  playClip() {\r\n    this.props.setLastPlayed(this.props.label);\r\n    this.audioClip.current.currentTime = 0;\r\n    this.audioClip.current.play();\r\n    this.pad.current.className = \"drum-pad active\";\r\n    setTimeout(() => {\r\n      this.pad.current.className = \"drum-pad\";\r\n    }, 200);\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    event.preventDefault();\r\n    if (event.key.toUpperCase() === this.props.keybind) {\r\n      this.playClip();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keypress', this.handleKeyPress);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keypress', this.handleKeyPress);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div \r\n        className='drum-pad'\r\n        id={this.props.label} \r\n        onClick={this.playClip}\r\n        ref={this.pad}\r\n      >\r\n      {this.props.keybind}\r\n      <audio \r\n        className='clip' \r\n        id={this.props.keybind} \r\n        src={this.props.src}\r\n        ref={this.audioClip}\r\n      />\r\n    </div>\r\n    );\r\n  }\r\n}","import boom from '../sounds/boom.wav';\r\nimport clap from '../sounds/clap.wav';\r\nimport hihat from '../sounds/hihat.wav';\r\nimport kick from '../sounds/kick.wav';\r\nimport openhat from '../sounds/openhat.wav';\r\nimport ride from '../sounds/ride.wav';\r\nimport snare from '../sounds/snare.wav';\r\nimport tink from '../sounds/tink.wav';\r\nimport tom from '../sounds/tom.wav';\r\n\r\nconst sounds = [\r\n  {\r\n    label: \"Boom\",\r\n    src: boom,\r\n    key: \"Q\"\r\n  },\r\n  {\r\n    label: \"Clap\",\r\n    src: clap,\r\n    key: \"W\"\r\n  },\r\n  {\r\n    label: \"Hi-Hat\",\r\n    src: hihat,\r\n    key: \"E\"\r\n  },\r\n  {\r\n    label: \"Kick\",\r\n    src: kick,\r\n    key: \"A\"\r\n  },\r\n  {\r\n    label: \"Open Hat\",\r\n    src: openhat,\r\n    key: \"S\"\r\n  },\r\n  {\r\n    label: \"Ride\",\r\n    src: ride,\r\n    key: \"D\"\r\n  },\r\n  {\r\n    label: \"Snare\",\r\n    src: snare,\r\n    key: \"Z\"\r\n  },\r\n  {\r\n    label: \"Tink\",\r\n    src: tink,\r\n    key: \"X\"\r\n  },\r\n  {\r\n    label: \"Tom\",\r\n    src: tom,\r\n    key: \"C\"\r\n  }\r\n];\r\n\r\nexport default sounds;","import React, { Component } from 'react';\r\nimport Display from './Display';\r\nimport DrumPad from './DrumPad';\r\n\r\nimport sounds from '../sounds';\r\n\r\nexport default class DrumMachine extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lastPlayed: \"\"\r\n    };\r\n    this.setLastPlayed = this.setLastPlayed.bind(this);\r\n  }\r\n\r\n  setLastPlayed(pad) {\r\n    this.setState({\r\n      lastPlayed: pad\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const pads = sounds.map((current, index) => \r\n      <DrumPad \r\n        label={current.label}\r\n        src={current.src}\r\n        keybind={current.key}\r\n        setLastPlayed={this.setLastPlayed}\r\n        key={index}\r\n      />\r\n    )\r\n    return (\r\n      <div className='drum-machine' id='drum-machine'>\r\n        <Display lastPlayed={this.state.lastPlayed}/>\r\n        <div className='drum-machine__pad-container'>\r\n          {pads}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport DrumMachine from './DrumMachine'\r\n\r\nconst App = () => (\r\n  <DrumMachine />\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/styles.sass';\nimport App from './js/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}